import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix


df = pd.read_excel("C:/Users/enesa/OneDrive/Desktop/Ders/merc.xlsx")



df = pd.get_dummies(df, columns=['transmission'], drop_first=True)

#  3. Baƒüƒ±msƒ±z ve Baƒüƒ±mlƒ± Deƒüi≈ükenleri Belirle
X = df.drop(columns=['price'])  # Girdi deƒüi≈ükenleri
y = df['price']  # Hedef deƒüi≈üken

# Hedef deƒüi≈ükeni sƒ±nƒ±flara ayƒ±ralƒ±m (√∂rneƒüin, fiyatƒ± 20,000'den y√ºksek ve d√º≈ü√ºk olarak sƒ±nƒ±flandƒ±ralƒ±m)
y = (y > 20000).astype(int)

#  4. Veriyi Eƒüitim ve Test Setlerine Ayƒ±r
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#  5. Random Forest Modelini √ñl√ßeklendirmeden Eƒüit
rf_model_no_scaling = RandomForestClassifier(random_state=42)
rf_model_no_scaling.fit(X_train, y_train)

#  6. √ñl√ßeklendirmeden Tahmin Yap ve Deƒüerlendir
y_pred_no_scaling = rf_model_no_scaling.predict(X_test)

accuracy_no_scaling = accuracy_score(y_test, y_pred_no_scaling)
conf_matrix_no_scaling = confusion_matrix(y_test, y_pred_no_scaling)

#  7. Veriyi √ñl√ßeklendir
scaler_X = StandardScaler()

X_train_scaled = scaler_X.fit_transform(X_train)
X_test_scaled = scaler_X.transform(X_test)

#  8. Random Forest Modelini √ñl√ßeklendirilmi≈ü Verilerle Eƒüit
rf_model_scaled = RandomForestClassifier(random_state=42)
rf_model_scaled.fit(X_train_scaled, y_train)

# üìå 9. √ñl√ßeklendirilmi≈ü Tahmin Yap ve Deƒüerlendir
y_pred_scaled = rf_model_scaled.predict(X_test_scaled)

accuracy_scaled = accuracy_score(y_test, y_pred_scaled)
conf_matrix_scaled = confusion_matrix(y_test, y_pred_scaled)

#  10. Sonu√ßlarƒ± Yazdƒ±r
print(" √ñl√ßeklendirilmemi≈ü Verilerle Sonu√ßlar:")
print(f"Accuracy: {accuracy_no_scaling:.4f}")
print(f"Confusion Matrix:\n{conf_matrix_no_scaling}\n")

print(" √ñl√ßeklendirilmi≈ü Verilerle Sonu√ßlar:")
print(f"Accuracy: {accuracy_scaled:.4f}")
print(f"Confusion Matrix:\n{conf_matrix_scaled}\n")

#  11. Confusion Matrix'i Grafik Olarak √áizdir
def plot_confusion_matrix(conf_matrix, title='Confusion Matrix'):
    plt.figure(figsize=(6, 5))
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False,
                xticklabels=['Low Price', 'High Price'], yticklabels=['Low Price', 'High Price'])
    plt.title(title)
    plt.ylabel('Ger√ßek Etiket')
    plt.xlabel('Tahmin Edilen Etiket')
    plt.show()

#  12. Grafik Olarak G√∂rselle≈ütir
plot_confusion_matrix(conf_matrix_no_scaling, title="Confusion Matrix (Random Forest - √ñl√ßeklendirilmemi≈ü Veri)")
plot_confusion_matrix(conf_matrix_scaled, title="Confusion Matrix (Random Forest - √ñl√ßeklendirilmi≈ü Veri)")
